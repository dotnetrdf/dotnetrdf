<?xml version="1.0"?>
<project name="dotNetRDF Core Library" default="build-nightly" basedir="../../">
  <description>Generates the dotNetRDF Core Library Builds</description>

  <!-- Load in the <ftp> task dll -->
  <loadtasks assembly="Build/nant/ftptask.dll" />
  
  <!-- Disable Building and Compiling Options -->
  <property name="dotnetrdf.nobuild" value="" />
  <property name="dotnetrdf.nosign" value="" />
  <property name="dotnetrdf.nocompile" value="" />
  <property name="dotnetrdf.nodist" value="" />
  <property name="dotnetrdf.nosilverlight" value="" />
  <property name="dotnetrdf.nowindowsphone" value="${dotnetrdf.nosilverlight}" />
  <property name="dotnetrdf.noportable" value="${dotnetrdf.nosilverlight}" />
  <property name="dotnetrdf.nonetcore" value=""/>
  <property name="dotnetrdf.configuration" value="Debug" />
  
  <!-- Set the Compiler Warnings we want to ignore -->
  <property name="dotnetrdf.nowarn" value="1591;0067" />
  
  <!-- Licensing Properties -->
  <property name="dotnetrdf.License.exclude.exts" 
            value="dll,pdb,exe,xml,xaml,xsd,dtd,xshd,config,xslt,ttl,rdf,out,rq,trig,trix,ru,nt,n3,nq,srx,owl,srj,json,txt,csv,tsv,csproj,user,template,cache,pfx,sql,resources,resx,properties,settings,html,xhtml,css,js,sparql,bak,ico,png,jpg,tiff,bmp,orig,snk,gz" />
  <property name="dotnetrdf.License.exclude.regex" value="hg|svn|obj|bin" />
  <property name="dotnetrdf.License.search" value="Copyright \(c\) 20\d{2}-20\d{2} dotNetRDF Project" />
  <property name="dotnetrdf.License.replace" value="License.txt" />
  <property name="dotnetrdf.License.overwrite" value="-overwrite" /> <!-- Alternative is -preserve which does not change existing Licenses -->
  
  <!-- Signing Properties -->
  <property name="dotnetrdf.keyfile" value="${project::get-base-directory()}Build/dotNetRDF.snk" />

  <!-- Version Properties -->
  <!-- When generating ZIP files with the dist targets use the command line -d option to set these appropriately -->
  <property name="dotnetrdf.version" value="1013" /> <!-- Version number used for dotNetRDF Library release ZIPs -->
  <property name="dotnetrdf.releasetype" value="pre8" /> <!-- Version descriptor used for dotNetRDF Library release ZIPs -->
  <property name="dotnetrdf.toolsversion" value="1013" /> <!-- Version number used for dotNetRDF Toolkit release ZIPs -->
  <property name="dotnetrdf.toolsreleasetype" value="pre8" /> <!-- Version descriptor used for dotNetRDF Toolkit release ZIPs -->
  <property name="dotnetrdf.nuspecversion" value="1.0.13-pre8" /> <!-- Version number passed to NuGet for packaging -->
  <property name="dotnetrdf.buildversion" value="1.0.13.0" /> <!-- Version number expected to be set for Assembly versions, used for pre-release validation -->

  <!-- Note that FTP credentials are not included in the file for obvious reasons -->
  <!-- If you want to use the upload targets then use the command line -d option to set these appropriately -->
  <property name="dotnetrdf.webserver" value="" />
  <property name="dotnetrdf.webserver.username" value="" />
  <property name="dotnetrdf.webserver.password" value="" />
  <connection id="dotNetRDFWebsite" server="${dotnetrdf.webserver}" username="${dotnetrdf.webserver.username}" password="${dotnetrdf.webserver.password}" />
  
  <!-- Names of ZIP Files generated by dist targets -->
  <property name="dotnetrdf.nightlyzip" value="dotNetRDF_library_nightly.zip" />
  <property name="dotnetrdf.libzip" value="dotNetRDF_library_${dotnetrdf.version}_${dotnetrdf.releasetype}.zip" />
  <property name="dotnetrdf.srczip" value="dotNetRDF_library_source_${dotnetrdf.version}_${dotnetrdf.releasetype}.zip" />
  <property name="dotnetrdf.toolkitzip" value="dotNetRDF_tools_${dotnetrdf.toolsversion}_${dotnetrdf.toolsreleasetype}.zip" />
  <property name="dotnetrdf.toolkitinstaller" value="dotNetRDF_tools_${dotnetrdf.toolsversion}_${dotnetrdf.toolsreleasetype}_installer.zip" />
  
  <!-- Project Generation Targets which generate some Project Files from others -->

  <target name="projectsync" description="Sync project files" unless="${dotnetrdf.nocompile}" 
	      depends="projectsync-core-net35,
                   projectsync-core-clientprofile,
	               projectsync-core-clientprofile-net35,
                   projectsync-core-portable,
		           projectsync-query-fulltext-clientprofile,
		           projectsync-query-fulltext-clientprofile-net35,
		           projectsync-query-fulltext-net35,
		           projectsync-data-virtuoso-net35,
                   projectsync-test-portable">

  </target>

  <target name="projectsync-core-net35" description="Syncs the dotNetRDF .Net 3.5 build project file"  unless="${dotnetrdf.nocompile}">
    <!-- This exec task syncs the Core .Net 3.5 project file with the Core Library -->
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/core/net40/dotNetRDF.csproj" />
      <arg value="Libraries/core/net35/dotNetRDF.Net35.csproj" />
    </exec>
  </target>

  <target name="projectsync-core-clientprofile" description="Syncs the dotNetRDF Client Profile build project file"  unless="${dotnetrdf.nocompile}">
    <!-- This exec task syncs the Client Profile project file with the Core Library -->
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/core/net40/dotNetRDF.csproj" />
      <arg value="Libraries/core/net40-client/dotNetRDF.ClientProfile.csproj" />
    </exec>
  </target>

  <target name="projectsync-core-portable" unless="${dotnetrdf.noportable == 'true' or dotnetrdf.nocompile == 'true'}">
	<exec program="Build/SyncProjects/SyncProjects.exe">
		<arg value="sync" />
		<arg value="Libraries/core/net40/dotNetRDF.csproj" />
		<arg value="Libraries/core/portable/dotNetRDF.Portable.csproj" />
	</exec>
  </target>
  
  <target name="projectsync-test-portable" unless="${dotnetrdf.noportable == 'true' or dotnetrdf.nocompile == 'true'}">
	<exec program="Build/SyncProjects/SyncProjects.exe">
		<arg value="sync" />
		<arg value="Testing/unittest/dotNetRDF.Test.csproj" />
		<arg value="Testing/portable/dotNetRDF.Portable.Test/dotNetRDF.Portable.Test.csproj" />
		<arg value="..\..\unittest\" />
	</exec>
  </target>
  
  <target name="projectsync-core-clientprofile-net35" description="Syncs the dotNetRDF Client Profile .Net 3.5 build project file"  unless="${dotnetrdf.nocompile}">
    <!-- This exec task syncs the Client Profile project file with the Core Library -->    
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/core/net40/dotNetRDF.csproj" />
      <arg value="Libraries/core/net35-client/dotNetRDF.ClientProfile.Net35.csproj" />
    </exec>
  </target>

  <target name="projectsync-query-fulltext-clientprofile" description="Syncs the dotNetRDF Query.FullText .Net 4.0 Client Profile build project file"  unless="${dotnetrdf.nocompile}">
    <!-- This exec task syncs the Query.FullText .Net 4.0 Client Profile project file with the Query.FullText project file -->
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/Query/FullText/net40/dotNetRDF.Query.FullText.csproj" />
      <arg value="Libraries/Query/FullText/net40-client/dotNetRDF.Query.FullText.ClientProfile.csproj" />
    </exec>
  </target>

  <target name="projectsync-query-fulltext-net35" description="Syncs the dotNetRDF Query.FullText .Net 3.5 build project file"  unless="${dotnetrdf.nocompile}">
    <!-- This exec task syncs the Query.FullText .Net 3.5 project file with the Query.FullText project file -->
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/Query/FullText/net40/dotNetRDF.Query.FullText.csproj" />
      <arg value="Libraries/Query/FullText/net35/dotNetRDF.Query.FullText.Net35.csproj" />
    </exec>
  </target>

  <target name="projectsync-query-fulltext-clientprofile-net35" description="Syncs the dotNetRDF Query.FullText .Net 3.5 Client Profile build project file"   unless="${dotnetrdf.nocompile}">
    <!-- This exec task syncs the Query.FullText .Net 3.5 Client Profile project file with the Query.FullText project file -->
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/Query/FullText/net40/dotNetRDF.Query.FullText.csproj" />
      <arg value="Libraries/Query/FullText/net35-client/dotNetRDF.Query.FullText.ClientProfile.Net35.csproj" />
    </exec>
  </target>

  <target name="projectsync-data-virtuoso-net35" description="Syncs the dotNetRDF Data.Virtuoso .Net 3.5 build project file"  unless="${dotnetrdf.nocompile}">
    <!-- This exec task syncs the Data.Virtuoso .Net 3.5 project file with the Data.Virtuoso project file -->
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/Data/Virtuoso/net40/dotNetRDF.Data.Virtuoso.csproj" />
      <arg value="Libraries/Data/Virtuoso/net35/dotNetRDF.Data.Virtuoso.Net35.csproj" />
    </exec>
  </target>
  
  <!-- License Targets which enforce License headers on the code -->

  <target name="license" description="Applies License headers to all targets"
          depends="license-libs,license-tests,license-utils" unless="${dotnetrdf.nocompile}" />

  <target name="license-libs" description="Applies License headers to all library targets"
          depends="license-core,
                   license-data-virtuoso,
                   license-query-fulltext,
                   license-editor-core,license-editor-wpf,
                   license-storemanager-core" unless="${dotnetrdf.nocompile}" />

  <target name="license-tests" description="Applies License headers to all test targets"
          depends="license-libs,
                   license-unit-tests,license-dawg-tests" unless="${dotnetrdf.nocompile}" />

  <target name="license-utils" description="Applies License headers to all utility targets"
          depends="license-libs,
                   license-util-convert,
                   license-util-editor-wpf,
                   license-util-opt-stats,
                   license-util-query-cmd,license-util-query-gui,
                   license-util-server-cmd,license-util-server-gui,
                   license-util-webdeploy,
                   license-util-storemanager" unless="${dotnetrdf.nocompile}" />

  <target name="license-core" description="Applies License headers to the Core Library"  unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/core/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>
  
  <!-- TODO: Probably need a license-core-portable target that ensures we don't overwrite 3rd Party Licenses -->

  <target name="license-data-virtuoso" description="Applies License headers to the Data.Virtuoso library" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/Data/Virtuoso/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-query-fulltext" description="Applies License headers to the Query.FullText library" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/Query/FullText/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-gui-winforms" description="Applies License headers to the dotNetRDF.WinForms library" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/gui.winforms/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-editor-core" description="Applies License headers to the rdfEditor.Core library" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/editor/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-editor-wpf" description="Applies License headers to the rdfEditor.Core.Wpf library" depends="license-editor-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/editor.wpf/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-storemanager-core" description="Applies License headers to the StoreManager.Core library" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/storemanager.core/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-unit-tests" description="Applies License headers to the Unit Tests library" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Testing/unittest/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-dawg-tests" description="Applies License headers to the DAWG Tests project" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Testing/sparqlDawgTests/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-convert" description="Applies License headers to the rdfConvert utility" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/rdfConvert/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-editor-wpf" description="Applies License headers to the rdfEditor.Wpf utility" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/rdfEditor.Wpf/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-opt-stats" description="Applies License headers to the rdfOptStats utility" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/rdfOptStats/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-query-cmd" description="Applies License headers to the rdfQuery utility" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/rdfQuery/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-query-gui" description="Applies License headers to the SparqlGUI utility" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/SparqlGUI/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-server-cmd" description="Applies License headers to the rdfServer utility" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/rdfServer/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-server-gui" description="Applies License headers to the rdfServer utility" depends="license-util-server-cmd" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/rdfServerGUI/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-webdeploy" description="Applies License headers to the rdfWebDeploy utility" depends="license-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/rdfWebDeploy/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <target name="license-util-storemanager" description="Applies License headers to the StoreManager utility" depends="license-core,license-storemanager-core" unless="${dotnetrdf.nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Utilities/StoreManager/" />
      <arg value="-exclude-exts" />
      <arg value="${dotnetrdf.License.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${dotnetrdf.License.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${dotnetrdf.License.search}" />
      <arg value="-license-file" />
      <arg value="${dotnetrdf.License.replace}" />
      <arg value="-fix" />
      <arg value="${dotnetrdf.License.overwrite}" />
    </exec>
  </target>

  <!-- Compile Targets which Compile the Code -->

  <target name="no-compile" description="Sets that no compilation should be done">
    <property name="dotnetrdf.nocompile" value="true" />
  </target>

  <target name="restore-packages" description="Restore NuGet packages necessary for build" unless="${dotnetrdf.nocompile}">
    <exec program="nuget">
      <arg value="restore" />
      <arg value="dotNetRDF.sln" />
    </exec>
  </target>

  <target name="compile" description="Compile the dotNetRDF released builds" unless="${dotnetrdf.nocompile}" 
          depends="restore-packages,
                   compile-libs,
                   compile-utils">
  </target>

  <target name="compile-libs" description="Copiles all libraries for main distribution and toolkit" unless="${dotnetrdf.nocompile}"
          depends="restore-packages,
                   compile-libs-main,
                   compile-libs-utils">
  </target>

  <target name="compile-libs-main" description="Compiles all the libraries that make up the main distribution" unless="${dotnetrdf.nocompile}"
          depends="restore-packages,
                   compile-libs-core,
                   compile-libs-data-virtuoso,
                   compile-libs-query-fulltext">
  </target>

  <target name="compile-libs-core" description="Compiles all builds of the Core library" unless="${dotnetrdf.nocompile}"
          depends="restore-packages,
                   compile-core,
                   compile-core-clientprofile,
                   compile-core-portable,
				   compile-core-net35,
				   compile-core-clientprofile-net35">  
  </target>

  <target name="compile-libs-data-virtuoso" description="Compiles all builds of the Data.Virtuoso library" unless="${dotnetrdf.nocompile}"
          depends="restore-packages,
                   compile-data-virtuoso,
				   compile-data-virtuoso-net35">
  </target>

  <target name="compile-libs-query-fulltext" description="Compiles all builds of the Query.FullText library" unless="${dotnetrdf.nocompile}"
          depends="restore-packages,
                   compile-query-fulltext,
                   compile-query-fulltext-clientprofile,
				   compile-query-fulltext-net35,
				   compile-query-fulltext-clientprofile-net35">
  </target>

  <target name="compile-libs-utils" description="Compiles all the additional libraries needed for the Toolkit distribution" unless="${dotnetrdf.nocompile}"
          depends="restore-packages,
                   compile-editor-core,compile-editor-wpf,
                   compile-storemanager-core">
  </target>

  <target name="compile-utils" description="Compiles the dotNetRDF Toolkit" unless="${dotnetrdf.nocompile}"
        depends="license-utils,
                 restore-packages,
                 compile-util-convert,
                 compile-util-editor-wpf,
                 compile-util-opt-stats,
                 compile-util-query-cmd,compile-util-query-gui,
                 compile-util-server-cmd,compile-util-server-gui,
				 compile-util-soh,
                 compile-util-webdeploy,
                 compile-util-storemanager">
    
  </target>

  <target name="compile-utils-installer" description="Compiles the dotNetRDF Toolkit and the Toolkit Installer" unless="${dotnetrdf.nocompile}"
          depends="restore-packages,
                   compile-utils,
                   compile-util-installer">

  </target>
          
  <target name="compile-core" description="Compiles just the dotNetRDF Core Library" depends="license-core,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Libraries/core/net40/dotNetRDF.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/p:DefineConstants=&quot;DEBUG,NET40,NANT&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-core-net35" description="Compile the dotNetRDF Core .Net 3.5 Build" unless="${dotnetrdf.nocompile}" depends="license-core,projectsync-core-net35,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/core/net35/dotNetRDF.Net35.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-core-clientprofile" description="Compiles the dotNetRDF Client Profile Build" unless="${dotnetrdf.nocompile}" depends="license-core,projectsync-core-clientprofile,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/core/net40-client/dotNetRDF.ClientProfile.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-core-clientprofile-net35" description="Compiles the dotNetRDF Client Profile .Net 3.5 Build" unless="${dotnetrdf.nocompile}" depends="license-core,projectsync-core-clientprofile-net35,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/core/net35-client/dotNetRDF.ClientProfile.Net35.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-core-portable" description="Compiles the dotNetRDF Portable Build" unless="${dotnetrdf.nocompile}" depends="license-core,projectsync-core-portable,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/core/portable/dotNetRDF.Portable.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>
  
  <target name="compile-core-netcore" description="Compiles the dotNetRDF .NET Core Build" unless="${dotnetrdf.nocompile}" depends="license-core,restore-packages">
	<exec program='C:\Program Files\dotnet\dotnet.exe'>
		<arg value="build"/>
		<arg value="Libraries\core\netcore" />
		<arg line="--configuration ${dotnetrdf.configuration}"/>
		<arg line="--no-dependencies" />
	</exec>
  </target>

  <target name="compile-data-virtuoso" description="Compiles the dotNetRDF Data.Virtuoso Library" unless="${dotnetrdf.nocompile}" depends="license-data-virtuoso,compile-core,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/Data/Virtuoso/net40/dotNetRDF.Data.Virtuoso.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-data-virtuoso-net35" description="Compiles the dotNetRDF Data.Virtuoso .Net 3.5 Library" unless="${dotnetrdf.nocompile}" depends="license-data-virtuoso,compile-core-net35,projectsync-data-virtuoso-net35,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/Data/Virtuoso/net35/dotNetRDF.Data.Virtuoso.Net35.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-query-fulltext" description="Complies the dotNetRDF Query.FullText Library" unless="${dotnetrdf.nocompile}" depends="license-query-fulltext,compile-core,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/Query/FullText/net40/dotNetRDF.Query.FullText.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-query-fulltext-clientprofile" description="Complies the dotNetRDF Query.FullText .Net 4.0 Client Profile Library" unless="${dotnetrdf.nocompile}" depends="license-query-fulltext,compile-core-clientprofile,projectsync-query-fulltext-clientprofile,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/Query/FullText/net40-client/dotNetRDF.Query.FullText.ClientProfile.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-query-fulltext-net35" description="Complies the dotNetRDF Query.FullText .Net 3.5 Library" unless="${dotnetrdf.nocompile}" depends="license-query-fulltext,compile-core-net35,projectsync-query-fulltext-net35,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/Query/FullText/net35/dotNetRDF.Query.FullText.Net35.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-query-fulltext-clientprofile-net35" description="Complies the dotNetRDF Query.FullText .Net 3.5 Client Profile Library" unless="${dotnetrdf.nocompile}" depends="license-query-fulltext,compile-core-clientprofile-net35,projectsync-query-fulltext-clientprofile-net35,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/Query/FullText/net35-client/dotNetRDF.Query.FullText.ClientProfile.Net35.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-editor-core" description="Compiles just the rdfEditor Core Library" depends="license-editor-core,compile-core,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Libraries/editor/rdfEditor.Core.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-editor-wpf" description="Compiles just the rdfEditor WPF Library" depends="license-editor-wpf,compile-editor-core,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Libraries/editor.wpf/rdfEditor.Core.Wpf.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-storemanager-core" description="Compiles just the StoreManager Core Library" depends="license-storemanager-core,compile-core,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Libraries/storemanager.core/StoreManager.Core.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-convert" description="Compile the rdfConvert Utility" depends="license-utils,compile-core,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/rdfConvert/rdfConvert.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-editor-wpf" description="Compile the rdfEditor Utility" depends="license-utils,compile-libs-main,compile-libs-utils,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/rdfEditor.Wpf/rdfEditor.Wpf.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-opt-stats" description="Compile the rdfOptStats Utility" depends="license-utils,compile-libs-main,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/rdfOptStats/rdfOptStats.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-query-cmd" description="Compile the rdfQuery Utility" depends="license-utils,compile-libs-main,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/rdfQuery/rdfQuery.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-query-gui" description="Compile the SparqlGui Utility" depends="license-utils,compile-libs-main,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/SparqlGui/SparqlGui.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-server-cmd" description="Compile the rdfServer Utility" depends="license-utils,compile-libs-main,compile-libs-utils,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/rdfServer/rdfServer.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-server-gui" description="Compile the rdfServerGUI Utility" depends="license-utils,compile-libs-main,compile-libs-utils,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/rdfServerGUI/rdfServerGUI.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-soh" description="Compile the soh Utility" depends="license-utils,compile-libs-main,compile-libs-utils,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/soh/soh.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-webdeploy" description="Compile the rdfWebDeploy Utility" depends="license-utils,compile-libs-main,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/rdfWebDeploy/rdfWebDeploy.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-storemanager" description="Compile the StoreManager Utility" depends="license-utils,compile-libs-main,compile-libs-utils,restore-packages" unless="${dotnetrdf.nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Utilities/StoreManager/StoreManager.csproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-util-installer" description="Compiles the dotNetRDF Toolkit Installer" unless="${dotnetrdf.nocompile}" depends="compile-utils,restore-packages">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
	<property name="msBuild.exe" value="C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe"/>
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Build/ToolkitInstaller/ToolkitInstaller.wixproj" />
      <arg line="/p:Configuration=${dotnetrdf.configuration}" />
      <arg line="/p:PostBuildEvent=" />
	  <arg line="/p:Platform=x86" />
      <arg line="/p:NoWarn=&quot;${dotnetrdf.nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>
    
  <!-- Nightly Build Targets -->

  <target name="no-build" description="Sets that no Builds should be performed" depends="no-compile">
    <property name="dotnetrdf.nobuild" value="true" />
  </target>
  
  <target name="build" description="Build dotNetRDF nightlies" unless="${dotnetrdf.nobuild}" 
          depends="build-libs,
                   build-utils">
    
  </target>

  <target name="build-libs" description="Builds dotNetRDF library nightlies" unless="${dotnetrdf.nobuild}"
          depends="build-core,
                   build-core-clientprofile,
				   build-core-net35,
				   build-core-clientprofile-net35,
                   build-core-portable,
                   build-data-virtuoso,
				   build-data-virtuoso-net35,
                   build-query-fulltext,
				   build-query-fulltext-clientprofile,
				   build-query-fulltext-net35,
				   build-query-fulltext-clientprofile-net35" />

  <target name="build-utils" description="Builds dotNetRDF Toolkit nightlies" unless="${dotnetrdf.nobuild}"
          depends="build-util-convert,
                   build-util-editor-wpf,
                   build-util-opt-stats,
                   build-util-query-cmd,build-util-query-gui,
                   build-util-server,
				   build-util-soh,
                   build-util-webdeploy,
                   build-util-storemanager">

  </target>
  
  <target name="build-core" description="Copy the latest build to the Nightly Build directory" unless="${dotnetrdf.nobuild}"  depends="compile-core">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40/" file="Libraries/core/net40/bin/${dotnetrdf.configuration}/dotNetRDF.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40/" file="Libraries/core/net40/bin/${dotnetrdf.configuration}/dotNetRDF.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40/" file="Libraries/core/net40/bin/${dotnetrdf.configuration}/dotNetRDF.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40/" file="Libraries/core/net40/bin/${dotnetrdf.configuration}/HtmlAgilityPack.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40/" file="Libraries/core/net40/bin/${dotnetrdf.configuration}/Newtonsoft.Json.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40/" file="Libraries/core/net40/bin/${dotnetrdf.configuration}/VDS.Common.dll" />
  </target>

  <target name="build-core-net35" description="Copy the latest 3.5 build to the Nightly Build directory" unless="${dotnetrdf.nobuild}"  depends="compile-core-net35">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35/" file="Libraries/core/net35/bin/${dotnetrdf.configuration}/dotNetRDF.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35/" file="Libraries/core/net35/bin/${dotnetrdf.configuration}/dotNetRDF.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35/" file="Libraries/core/net35/bin/${dotnetrdf.configuration}/dotNetRDF.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35/" file="Libraries/core/net35/bin/${dotnetrdf.configuration}/HtmlAgilityPack.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35/" file="Libraries/core/net35/bin/${dotnetrdf.configuration}/Newtonsoft.Json.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35/" file="Libraries/core/net35/bin/${dotnetrdf.configuration}/VDS.Common.dll" />
  </target>

  <target name="build-core-clientprofile" description="Copy the latest Client Profile build to the Client Profile Nightly Build directory" unless="${dotnetrdf.nobuild}" depends="compile-core-clientprofile">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40-client/" file="Libraries/core/net40-client/bin/${dotnetrdf.configuration}/dotNetRDF.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40-client/" file="Libraries/core/net40-client/bin/${dotnetrdf.configuration}/dotNetRDF.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40-client/" file="Libraries/core/net40-client/bin/${dotnetrdf.configuration}/dotNetRDF.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40-client/" file="Libraries/core/net40-client/bin/${dotnetrdf.configuration}/HtmlAgilityPack.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40-client/" file="Libraries/core/net40-client/bin/${dotnetrdf.configuration}/Newtonsoft.Json.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net40-client/" file="Libraries/core/net40-client/bin/${dotnetrdf.configuration}/VDS.Common.dll" />
  </target>

  <target name="build-core-clientprofile-net35" description="Copy the latest Client Profile 3.5 build to the Client Profile 3.5 Nightly Build directory" unless="${dotnetrdf.nobuild}" depends="compile-core-clientprofile-net35">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35-client/" file="Libraries/core/net35-client/bin/${dotnetrdf.configuration}/dotNetRDF.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35-client/" file="Libraries/core/net35-client/bin/${dotnetrdf.configuration}/dotNetRDF.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35-client/" file="Libraries/core/net35-client/bin/${dotnetrdf.configuration}/dotNetRDF.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35-client/" file="Libraries/core/net35-client/bin/${dotnetrdf.configuration}/HtmlAgilityPack.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35-client/" file="Libraries/core/net35-client/bin/${dotnetrdf.configuration}/Newtonsoft.Json.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/net35-client/" file="Libraries/core/net35-client/bin/${dotnetrdf.configuration}/VDS.Common.dll" />
  </target>

  <target name="build-core-portable" description="Copy the latest Portable build to the Portable Nightly Build directory" unless="${dotnetrdf.nobuild}" depends="compile-core-portable">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/portable/" file="Libraries/core/portable/bin/${dotnetrdf.configuration}/dotNetRDF.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/portable/" file="Libraries/core/portable/bin/${dotnetrdf.configuration}/dotNetRDF.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/portable/" file="Libraries/core/portable/bin/${dotnetrdf.configuration}/dotNetRDF.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/portable/" file="Libraries/core/portable/bin/${dotnetrdf.configuration}/Portable.Runtime.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/portable/" file="Libraries/core/portable/bin/${dotnetrdf.configuration}/Newtonsoft.Json.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Core/portable/" file="Libraries/core/portable/bin/${dotnetrdf.configuration}/VDS.Common.dll" />
  </target>

  <target name="build-core-netcore" description="Copy the latest .NET Core build to the .NET Core Nightly Build directory" unless="${dotnetrdf.nobuild}" depends="compile-core-netcore">
	<copy overwrite="true" todir="bin/nightlies/Libraries/Core/netstandard1.4/" 
	      file="Libraries/core/netcore/bin/${dotnetrdf.configuration}/netstandard1.4/dotNetRDF.dll" />
	<copy overwrite="true" todir="bin/nightlies/Libraries/Core/netstandard1.4/" 
	      file="Libraries/core/netcore/bin/${dotnetrdf.configuration}/netstandard1.4/dotNetRDF.deps.json" />
	<copy overwrite="true" todir="bin/nightlies/Libraries/Core/netstandard1.4/" 
	      file="Libraries/core/netcore/bin/${dotnetrdf.configuration}/netstandard1.4/dotNetRDF.pdb"
          if="${dotnetrdf.configuration == 'Debug'}" />
  </target>
  
  <target name="build-data-virtuoso" description="Copy the latest Data.Virtuoso build to the Data.Virtuoso nightly build directory" unless="${dotnetrdf.nobuild}" depends="compile-data-virtuoso">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Data/Virtuoso/net40/" file="Libraries/Data/Virtuoso/net40/bin/${dotnetrdf.configuration}/dotNetRDF.Data.Virtuoso.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Data/Virtuoso/net40/" file="Libraries/Data/Virtuoso/net40/bin/${dotnetrdf.configuration}/dotNetRDF.Data.Virtuoso.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Data/Virtuoso/net40/" file="Libraries/Data/Virtuoso/net40/bin/${dotnetrdf.configuration}/dotNetRDF.Data.Virtuoso.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Data/Virtuoso/net40/" file="Libraries/Data/Virtuoso/net40/bin/${dotnetrdf.configuration}/virtado4.dll" />
  </target>

  <target name="build-data-virtuoso-net35" description="Copy the latest Data.Virtuoso 3.5 build to the Data.Virtuoso nightly build directory" unless="${dotnetrdf.nobuild}" depends="compile-data-virtuoso-net35">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Data/Virtuoso/net35/" file="Libraries/Data/Virtuoso/net35/bin/${dotnetrdf.configuration}/dotNetRDF.Data.Virtuoso.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Data/Virtuoso/net35/" file="Libraries/Data/Virtuoso/net35/bin/${dotnetrdf.configuration}/dotNetRDF.Data.Virtuoso.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Data/Virtuoso/net35/" file="Libraries/Data/Virtuoso/net35/bin/${dotnetrdf.configuration}/dotNetRDF.Data.Virtuoso.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Data/Virtuoso/net35/" file="Libraries/Data/Virtuoso/net35/bin/${dotnetrdf.configuration}/virtado3.dll" />
  </target>

  <target name="build-query-fulltext" description="Copy the latest Query.FullText build to the Query.FullText nightly build directory" unless="${dotnetrdf.nobuild}" depends="compile-query-fulltext">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net40/" file="Libraries/Query/FullText/net40/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net40/" file="Libraries/Query/FullText/net40/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net40/" file="Libraries/Query/FullText/net40/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net40/" file="Libraries/Query/FullText/net40/bin/${dotnetrdf.configuration}/Lucene.Net.dll" />
  </target>

  <target name="build-query-fulltext-clientprofile" description="Copy the latest Query.FullText build to the Query.FullText Client Profile nightly build directory" unless="${dotnetrdf.nobuild}" depends="compile-query-fulltext-clientprofile">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net40-client/" file="Libraries/Query/FullText/net40-client/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net40-client/" file="Libraries/Query/FullText/net40-client/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net40-client/" file="Libraries/Query/FullText/net40-client/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net40-client/" file="Libraries/Query/FullText/net40-client/bin/${dotnetrdf.configuration}/Lucene.Net.dll" />
  </target>

  <target name="build-query-fulltext-net35" description="Copy the latest Query.FullText build to the Query.FullText nightly build directory" unless="${dotnetrdf.nobuild}" depends="compile-query-fulltext-net35">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net35/" file="Libraries/Query/FullText/net35/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net35/" file="Libraries/Query/FullText/net35/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net35/" file="Libraries/Query/FullText/net35/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net35/" file="Libraries/Query/FullText/net35/bin/${dotnetrdf.configuration}/Lucene.Net.dll" />
  </target>

  <target name="build-query-fulltext-clientprofile-net35" description="Copy the latest Query.FullText build to the Query.FullText nightly build directory" unless="${dotnetrdf.nobuild}" depends="compile-query-fulltext-clientprofile-net35">
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net35-client/" file="Libraries/Query/FullText/net35-client/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.dll" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net35-client/" file="Libraries/Query/FullText/net35-client/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.pdb" unless="${'${dotnetrdf.configuration}' != 'Debug'}" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net35-client/" file="Libraries/Query/FullText/net35-client/bin/${dotnetrdf.configuration}/dotNetRDF.Query.FullText.xml" />
    <copy overwrite="true" todir="bin/nightlies/Libraries/Query/FullText/net35-client/" file="Libraries/Query/FullText/net35-client/bin/${dotnetrdf.configuration}/Lucene.Net.dll" />
  </target>

  <target name="build-util-convert" description="Copy the latest rdfConvert build to the nightly build directory" unless="${dotnetrdf.nobuild}" depends="compile-util-convert">
    <copy overwrite="true" todir="bin/nightlies/Toolkit/rdfConvert">
      <fileset basedir="Utilities/rdfConvert/bin/Debug">
        <include name="rdfConvert.exe" />
        <include name="rdfConvert.exe.config" />
        <include name="*.dll" />
      </fileset>
    </copy>
  </target>

  <target name="build-util-editor-wpf" unless="${dotnetrdf.nobuild}" depends="compile-util-editor-wpf">
    <copy overwrite="true" todir="bin/nightlies/Toolkit/rdfEditor.Wpf">
      <fileset basedir="Utilities/rdfEditor.Wpf/bin/Debug">
        <include name="rdfEditor.exe" />
        <include name="rdfEditor.exe.config" />
        <include name="*.dll" />
        <include name="Syntax/**" />
      </fileset>
    </copy>
  </target>

  <target name="build-util-opt-stats" unless="${dotnetrdf.nobuild}" depends="compile-util-opt-stats">
    <copy overwrite="true" todir="bin/nightlies/Toolkit/rdfOptStats">
      <fileset basedir="Utilities/rdfOptStats/bin/Debug">
        <include name="rdfOptStats.exe" />
        <include name="rdfOptStats.exe.config" />
        <include name="*.dll" />
      </fileset>
    </copy>
  </target>

  <target name="build-util-query-cmd" unless="${dotnetrdf.nobuild}" depends="compile-util-query-cmd">
    <copy overwrite="true" todir="bin/nightlies/Toolkit/rdfQuery">
      <fileset basedir="Utilities/rdfQuery/bin/Debug">
        <include name="rdfQuery.exe" />
        <include name="rdfQuery.exe.config" />
        <include name="*.dll" />
      </fileset>
    </copy>
  </target>

  <target name="build-util-query-gui" unless="${dotnetrdf.nobuild}" depends="compile-util-query-gui">
    <copy overwrite="true" todir="bin/nightlies/Toolkit/SparqlGUI">
      <fileset basedir="Utilities/SparqlGUI/bin/Debug">
        <include name="SparqlGUI.exe" />
        <include name="SparqlGUI.exe.config" />
        <include name="*.dll" />
        <include name="database.ico" />
        <include name="database_table.ico" />
        <include name="default.rq" />
      </fileset>
    </copy>    
  </target>

  <target name="build-util-server" unless="${dotnetrdf.nobuild}" depends="compile-util-server-cmd,compile-util-server-gui">
    <copy overwrite="true" todir="bin/nightlies/Toolkit/rdfServer">
      <fileset basedir="Utilities/rdfServer/bin/Debug">
        <include name="rdfServer.exe" />
        <include name="rdfServer.exe.config" />
        <include name="rdfServerGUI.exe" />
        <include name="rdfServerGUI.exe.config" />
        <include name="*.dll" />
        <include name="default.ttl" />
        <include name="server.config" />
        <include name="servercontrol.html" />
      </fileset>
    </copy>
  </target>

  <target name="build-util-soh" unless="${dotnetrdf.nobuild}" depends="compile-util-soh">
	<copy overwrite="true" todir="bin/nightlies/Toolkit/soh">
		<fileset basedir="Utilities/soh/bin/Debug">
		  <include name="soh.exe"/>
		  <include name="soh.exe.config" />
		  <include name="*.dll"/>
		</fileset>
	</copy>
  </target>
  
  <target name="build-util-webdeploy" unless="${dotnetrdf.nobuild}" depends="compile-util-webdeploy">
    <copy overwrite="true" todir="bin/nightlies/Toolkit/rdfWebDeploy">
      <fileset basedir="Utilities/rdfWebDeploy/bin/Debug">
        <include name="rdfWebDeploy.exe" />
        <include name="rdfWebDeploy.exe.config" />
        <include name="*.dll" />
      </fileset>
    </copy>
  </target>

  <target name="build-util-storemanager" unless="${dotnetrdf.nobuild}" depends="compile-util-storemanager">
    <copy overwrite="true" todir="bin/nightlies/Toolkit/StoreManager">
      <fileset basedir="Utilities/StoreManager/bin/Debug">
        <include name="StoreManager.exe" />
        <include name="StoreManager.exe.config" />
        <include name="*.dll" />
        <include name="file-manager.ico" />
        <include name="database_gear.ico" />
        <include name="plugins/**" />
      </fileset>
    </copy>
  </target>

  <!-- Release Build Targets -->

  <target name="validate-release" description="Validates that the release artifacts have the correct version set"
	        depends="validate-release-libs,
		   validate-release-utils" />

  <target name="validate-release-libs" description="Validates that the libraries to be released have the correct version set">
    <property name="dotnetrdf.configuration" value="Release" />
    <exec program="Build/VersionBumper/VersionBumper.exe" failonerror="true">
      <arg value="-scan" />
      <arg value="Libraries/" />
      <arg value="-validate" />
      <arg value="${dotnetrdf.buildversion}" />
    </exec>
  </target>

  <target name="validate-release-utils" description="Validates that the libraries to be released have the correct version set">
    <exec program="Build/VersionBumper/VersionBumper.exe" failonerror="true">
      <arg value="-scan" />
      <arg value="Utilities/" />
      <arg value="-validate" />
      <arg value="${dotnetrdf.buildversion}" />
    </exec>
  </target>

  <target name="build-release" description="Copies the builds to the stable build directory ready for a release" unless="${dotnetrdf.nobuild}"
          depends="validate-release,
                   build-release-libs,
                   build-release-utils" />

  <target name="build-release-libs" description="Copy the library builds to the Stable Build directory ready for a release" unless="${dotnetrdf.nobuild}" depends="validate-release-libs,build-libs">
    <copy todir="bin/stable/Libraries/" overwrite="true">
      <fileset basedir="bin/nightlies/Libraries">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <target name="build-release-utils" description="Copy the toolkit builds to the Stable build directory for a release" unless="${dotnetrdf.nobuild}" depends="validate-release-utils,build-utils">
    <copy todir="bin/stable/Toolkit/" overwrite="true">
      <fileset basedir="bin/nightlies/Toolkit">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>
  
  <!-- Clean Targets -->

  <target name="clean" description="Cleans the bin/ and obj/ directories of all projects causing a rebuild to be necessary"
          depends="clean-nightlies,clean-stable,
                   clean-intermediaries,
                   clean-dist,
                   clean-shfb,
                   clean-nuget">
  </target>

  <target name="clean-nightlies" description="Cleans the nightly build directory">
    <delete failonerror="true">
      <fileset>
        <include name="bin/nightlies/**/*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-stable" description="Cleans the stable build directory">
    <delete failonerror="true">
      <fileset>
        <include name="bin/stable/**/*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-hg" description="Cleans the hg .orig files that may be left behind by reverted changes">
    <delete failonerror="false">
      <fileset>
        <include name="**/*.orig" />
      </fileset>
    </delete>
  </target>

  <target name="clean-intermediaries" description="Cleans the intermediary bin/ and obj/ directories of all projects">
    <delete failonerror="false">
      <fileset>
        <include name="**/bin/**/*" />
        <include name="**/obj/**/*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-dist" description="Cleans the distibution zip files">
    <delete failonerror="false">
      <fileset>
        <include name="dotNetRDF*.zip" />
      </fileset>
    </delete>
  </target>

  <target name="clean-shfb" description="Cleans the Sandcastle working directory">
    <delete failonerror="false">
      <fileset>
        <include name="Build/shfb/Help/*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-nuget" description="Cleans the NuGet working directories">
   <delete failonerror="false">
     <fileset>
       <include name="Build/nuget/**/lib/*" />
       <include name="Build/nuget/**/*.nupkg" />
     </fileset>
   </delete>
  </target>
  
  <!-- Dist Targets for creating the distribution ZIP Files -->

  <target name="no-dist" description="Sets that no distributions should be built" depends="no-build">
    <property name="dotnetrdf.nodist" value="true" />
  </target>

  <target name="dist" description="Creates the Distribution ZIP Files" unless="${dotnetrdf.nodist}"
          depends="dist-libs-stable,
                   dist-libs-nightly,
                   dist-utils-stable,
                   dist-utils-nightly,
                   dist-utils-installer,
                   dist-libs-nuget">
    
  </target>

  <target name="dist-libs-stable" description="Creates the ZIP files for the stable API Release" depends="build-release-libs" unless="${dotnetrdf.nodist}">
    <zip zipfile="${dotnetrdf.libzip}" ziplevel="9">
      <fileset>
        <include name="Acknowledgments.txt" />
        <include name="License.txt" />
      </fileset>
      <fileset basedir="Libraries">
        <include name="ReadMe.txt" />
        <include name="ReleaseNotes.txt" />
        <include name="ChangeLog.txt" />
      </fileset>
      <fileset basedir="bin/stable/Libraries/" failonempty="true">
        <include name="**/*" />
      </fileset>
    </zip>
    <zip zipfile="${dotnetrdf.srczip}" ziplevel="9">
      <fileset failonempty="true">
        <include name="**/*" />
        <exclude name=".hg/" />
        <exclude name=".git/" />
        <exclude name=".vs/" />
        <exclude name="**/bin/**/*" />
        <exclude name="**/obj/**/*" />
        <exclude name="**/*.dll" />
        <exclude name="**/*.exe" />
        <exclude name="**/*.pdb" />
        <exclude name="Testing/" />
        <exclude name="TestResults/" />
        <exclude name="Samples/" />
        <exclude name="*.zip" />
        <exclude name="Utilities/bsbm/" />
        <exclude name="Build/shfb/Help/" />
        <exclude name="Build/NuGet/*/lib/**/*" />
        <exclude name="packages/" />
      </fileset>
    </zip>
  </target>

  <target name="dist-libs-nightly" description="Creates the ZIP files for the nightly API release" depends="build-libs" unless="${dotnetrdf.nodist}">
    <zip zipfile="${dotnetrdf.nightlyzip}" ziplevel="9">
      <fileset>
        <include name="Acknowledgments.txt" />
        <include name="License.txt" />
      </fileset>
      <fileset basedir="Libraries">
        <include name="ReadMe.txt" />
        <include name="ReleaseNotes.txt" />
        <include name="ChangeLog.txt" />
      </fileset>
      <fileset basedir="bin/nightlies/Libraries/" failonempty="true">
        <include name="/**/*" />
      </fileset>
    </zip>
  </target>

  <target name="dist-utils-stable" description="Creates the ZIP files for the stable Toolkit release" depends="build-release-utils" unless="${dotnetrdf.nodist}">
    <zip zipfile="${dotnetrdf.toolkitzip}" ziplevel="9">
      <fileset>
        <include name="Acknowledgments.txt" />
        <include name="License.txt" />
      </fileset>
      <fileset basedir="Utilities">
        <include name="ReadMe.txt" />
        <include name="ChangeLog.txt" />
      </fileset>
      <fileset basedir="bin/stable/Toolkit/" failonempty="true">
        <include name="**/*" />
      </fileset>
    </zip>
  </target>

  <target name="dist-utils-nightly" description="Creates the ZIP files for the nightly Toolkit release" depends="build-release-utils" unless="${dotnetrdf.nodist}">
    <zip zipfile="${dotnetrdf.toolkitzip}" ziplevel="9">
      <fileset>
        <include name="Acknowledgments.txt" />
        <include name="License.txt" />
      </fileset>
      <fileset basedir="Utilities">
        <include name="ReadMe.txt" />
        <include name="ChangeLog.txt" />
      </fileset>
      <fileset basedir="bin/nightlies/Toolkit/" failonempty="true">
        <include name="**/*" />
      </fileset>
    </zip>
  </target>

  <target name="dist-utils-installer" description="Creates the Toolkit Installer ZIP" depends="compile-utils-installer" unless="${dotnetrdf.nodist}">
    <zip zipfile="${dotnetrdf.toolkitinstaller}" ziplevel="9">
      <fileset>
        <include name="Acknowledgments.txt" />
        <include name="License.txt" />
      </fileset>
      <fileset basedir="Utilities">
        <include name="ReadMe.txt" />
        <include name="ChangeLog.txt" />
      </fileset>
      <fileset basedir="Build/ToolkitInstaller/bin/${dotnetrdf.configuration}/" failonempty="true">
        <include name="*" />
      </fileset>
    </zip>
  </target>

  <target name="dist-libs-nuget" description="Creates the NuGet packages" unless="${dotnetrdf.nodist}" 
          depends="dist-libs-nuget-core,
                   dist-libs-nuget-data-virtuoso,
                   dist-libs-nuget-query-fulltext">
  </target>
  
  <target name="dist-libs-nuget-core" description="Creates the Core Library NuGet package" depends="build-release-libs, do-dist-libs-nuget-core" unless="${dotnetrdf.nodist}">
  </target>

  <target name="do-dist-libs-nuget-core" description="Creates the Core Library NuGet package (no dependency)" unless="${dotnetrdf.nodist}">
    <!-- Firstly clean out the relevant directories -->
    <delete>
      <fileset basedir="Build/nuget/Core/lib/net40/">
        <include name="*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Core/lib/net40-client/">
        <include name="*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Core/lib/net35/">
        <include name="*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Core/lib/net35-client/">
        <include name="*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Core/lib/portable-net4+sl4+netcore45+wp8+MonoAndroid1+MonoTouch1">
        <include name="*" />
      </fileset>
    </delete>
	<delete>
	  <fileset basedir="Build/nuget/Core/lib/netstandard1.4">
	    <include name="*" />
	  </fileset>
	</delete>
    <delete>
      <fileset basedir="Build/nuget/Core/src/">
        <include name="**.cs" />
      </fileset>
    </delete>
    <!-- Then create the Core library package -->
    <copy todir="Build/nuget/Core/lib/net40/">
      <fileset basedir="bin/stable/Libraries/Core/net40/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <copy todir="Build/nuget/Core/lib/net40-client/">
      <fileset basedir="bin/stable/Libraries/Core/net40-client/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <copy todir="Build/nuget/Core/lib/net35/">
      <fileset basedir="bin/stable/Libraries/Core/net35/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <copy todir="Build/nuget/Core/lib/net35-client/">
      <fileset basedir="bin/stable/Libraries/Core/net35-client/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <copy todir="Build/nuget/Core/lib/portable-net4+sl5+netcore45+wpa81+wp8+MonoAndroid1+MonoTouch1">
      <fileset basedir="bin/stable/Libraries/Core/portable/">
        <include name="dotNetRDF.*" />
        <!-- Have to include Portable.Runtime.dll directly as it ain't on NuGet yet -->
        <include name="Portable.Runtime.dll" />
      </fileset>
    </copy>

    <!-- Finally invoke nuget on the package -->
    <exec workingdir="Build/nuget/Core/" program="nuget.exe">
      <arg value="pack" />
      <arg value="dotNetRDF.nuspec" />
      <arg value="-Verbosity" />
      <arg value="detailed" />
      <arg value="-Version" />
      <arg value="${dotnetrdf.nuspecversion}" />
    </exec>
  </target>

  <target name="dist-libs-nuget-data-virtuoso" description="Creates the Core Library NuGet package" depends="build-release-libs, do-dist-libs-nuget-data-virtuoso" unless="${dotnetrdf.nodist}">
  </target>

  <target name="do-dist-libs-nuget-data-virtuoso" description="Creates the Data.Virtuoso NuGet package (no dependency)" unless="${dotnetrdf.nodist}">
    <!-- Firstly clean out the relevant directories -->
    <delete>
      <fileset basedir="Build/nuget/Data.Virtuoso/lib/net40">
        <include name="dotNetRDF.*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Data.Virtuoso/lib/net40-client">
        <include name="dotNetRDF.*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Data.Virtuoso/lib/net35">
        <include name="dotNetRDF.*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Data.Virtuoso/lib/net35-client">
        <include name="dotNetRDF.*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Data.Virtuoso/src/">
        <include name="**.cs" />
      </fileset>
    </delete>
    <!-- Then create the Data.Virtuoso package -->
    <copy todir="Build/nuget/Data.Virtuoso/lib/net40/">
      <fileset basedir="bin/stable/Libraries/Data/Virtuoso/net40/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <copy todir="Build/nuget/Data.Virtuoso/lib/net35/">
      <fileset basedir="bin/stable/Libraries/Data/Virtuoso/net35/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <!-- Invoke nuget on the package -->
    <exec workingdir="Build/nuget/Data.Virtuoso/" program="nuget.exe">
      <arg value="pack" />
      <arg value="dotNetRDF.Data.Virtuoso.nuspec" />
      <arg value="-Verbosity" />
      <arg value="detailed" />
      <arg value="-Version" />
      <arg value="${dotnetrdf.nuspecversion}" />
    </exec>
  </target>
 
  <target name="dist-libs-nuget-query-fulltext" description="Creates the Core Library NuGet package" depends="build-release-libs, do-dist-libs-nuget-query-fulltext" unless="${dotnetrdf.nodist}">
  </target>

  <target name="do-dist-libs-nuget-query-fulltext" description="Creates the Query.FullText NuGet package (no dependency)" unless="${dotnetrdf.nodist}">
    <!-- Firstly clean out the relevant directories -->
    <delete>
      <fileset basedir="Build/nuget/Query.FullText/lib/net40">
        <include name="*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Query.FullText/lib/net40-client">
        <include name="*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Query.FullText/lib/net35">
        <include name="*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Query.FullText/lib/net35-client">
        <include name="*" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="Build/nuget/Query.FullText/src/">
        <include name="**.cs" />
      </fileset>
    </delete>
    <!-- Then create the Query.FullText package -->
    <copy todir="Build/nuget/Query.FullText/lib/net40/">
      <fileset basedir="bin/stable/Libraries/Query/FullText/net40/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <copy todir="Build/nuget/Query.FullText/lib/net40-client/">
      <fileset basedir="bin/stable/Libraries/Query/FullText/net40-client/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <copy todir="Build/nuget/Query.FullText/lib/net35/">
      <fileset basedir="bin/stable/Libraries/Query/FullText/net35/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <copy todir="Build/nuget/Query.FullText/lib/net35-client/">
      <fileset basedir="bin/stable/Libraries/Query/FullText/net35-client/">
        <include name="dotNetRDF.*" />
      </fileset>
    </copy>
    <!-- Invoke nuget on the package -->
    <exec workingdir="Build/nuget/Query.FullText/" program="nuget.exe">
      <arg value="pack" />
      <arg value="dotNetRDF.Query.FullText.nuspec" />
      <arg value="-Verbosity" />
      <arg value="detailed" />
      <arg value="-Version" />
      <arg value="${dotnetrdf.nuspecversion}" />
    </exec>
  </target>
  
  <!-- Upload Targets for Uploading the Builds to a website and Publishing NuGet Packages -->

  <target name="upload" description="Uploads ZIPs to a Website and publish NuGet packages"
          depends="upload-zips,
                   upload-libs-nuget">
  </target>

  <target name="upload-zips" description="Uploads the Distribution ZIP Files to a website"
          depends="upload-libs-nightly,
                   upload-libs-stable,
                   upload-utils-stable">
  </target>

  <target name="upload-libs-nightly" description="Uploads the Nightly ZIPs to a website" 
          depends="dist-libs-nightly" 
          if="${string::get-length(dotnetrdf.webserver) > 0 and string::get-length(dotnetrdf.webserver.username) > 0 and string::get-length(dotnetrdf.webserver.password) > 0}">
    <ftp connection="dotNetRDFWebsite" remotedir="/downloads/" connectmode="PASSIVE" createdirs="false" verbose="true">
      <put type="bin" update="false">
        <include name="/${dotnetrdf.nightlyzip}" />
      </put>
    </ftp>
  </target>

  <target name="upload-libs-stable" description="Uploads the Release ZIPs to a website" 
          depends="dist-libs-stable"
          if="${string::get-length(dotnetrdf.webserver) > 0 and string::get-length(dotnetrdf.webserver.username) > 0 and string::get-length(dotnetrdf.webserver.password) > 0}">
    <ftp connection="dotNetRDFWebsite" remotedir="/downloads/" connectmode="PASSIVE" createdirs="false" verbose="true">
      <put type="bin" update="false">
        <include name="/${dotnetrdf.libzip}" />
        <include name="/${dotnetrdf.srczip}" />
      </put>
    </ftp>
  </target>

  <target name="upload-utils-stable" description="Uploads the Toolkit ZIPs to a website" depends="dist-utils-stable">
    <ftp connection="dotNetRDFWebsite" remotedir="/downloads/" connectmode="PASSIVE" createdirs="false" verbose="true">
      <put type="bin" update="false">
        <include name="/${dotnetrdf.toolkitzip}" />
      </put>
    </ftp>
  </target>

  <target name="upload-libs-nuget" description="Uploads the NuGet Packages to the NuGet Gallery" 
          depends="upload-libs-nuget-core,
                   upload-libs-nuget-data-virtuoso,
                   upload-libs-nuget-query-fulltext">
  </target>

  <target name="upload-libs-nuget-core" description="Uploads the Core Library Package to the NuGet Gallery" depends="dist-libs-nuget-core">
    <exec workingdir="Build/nuget/Core/" program="nuget.exe">
      <arg value="push" />
      <arg value="dotNetRDF.${dotnetrdf.nuspecversion}.nupkg" />
      <arg value="-Verbosity" />
      <arg value="detailed" />
    </exec>
  </target>

  <target name="upload-libs-nuget-data-virtuoso" description="Uploads the Data.Virtuoso Library package to the NuGet Gallery" depends="dist-libs-nuget-data-virtuoso">
    <exec workingdir="Build/nuget/Data.Virtuoso/" program="nuget.exe">
      <arg value="push" />
      <arg value="dotNetRDF.Data.Virtuoso.${dotnetrdf.nuspecversion}.nupkg" />
      <arg value="-Verbosity" />
      <arg value="detailed" />
    </exec>
  </target>

  <target name="upload-libs-nuget-query-fulltext" description="Uploads the Query.FullText Library package to the NuGet Gallery" depends="dist-libs-nuget-query-fulltext">
    <exec workingdir="Build/nuget/Query.FullText/" program="nuget.exe">
      <arg value="push" />
      <arg value="dotNetRDF.Query.FullText.${dotnetrdf.nuspecversion}.nupkg" />
      <arg value="-Verbosity" />
      <arg value="detailed" />
    </exec>
  </target>

  <target name="patch-nuspec" description="Changes the dependency version for dotNetRDF in library packages">
    <style style="Build/nant/patch-nuspec.xsl" destdir="Build/nant/">
      <parameters>
        <parameter name="version" value="${version}" />
      </parameters>
      <infiles>
        <include name="Build/nuget/Data.Virtuoso/dotNetRDF.Data.Virtuoso.nuspec" />
        <include name="Build/nuget/Query.FullText/dotNetRDF.Query.FullText.nuspec" />
      </infiles>
    </style>
    <move file="Build/nant/dotNetRDF.Data.Virtuoso.html" tofile="Build/nuget/Data.Virtuoso/dotNetRDF.Data.Virtuoso.nuspec" />
    <move file="Build/nant/dotNetRDF.Query.FullText.html" tofile="Build/nuget/Query.FullText/dotNetRDF.Query.FullText.nuspec" />
  </target>
</project>