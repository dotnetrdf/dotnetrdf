/*
// <copyright>
// dotNetRDF is free and open source software licensed under the MIT License
// -------------------------------------------------------------------------
// 
// Copyright (c) 2009-2023 dotNetRDF Project (http://dotnetrdf.org/)
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is furnished
// to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
*/

using VDS.RDF.JsonLd.Syntax;

namespace VDS.RDF.Writing
{
    /// <summary>
    /// Class representing the options that can be passed to the <see cref="JsonLdWriter"/> via its constructor.
    /// </summary>
    public class JsonLdWriterOptions
    {
        /// <summary>
        /// Order dictionary keys lexicographically in the JSON output.
        /// </summary>
        public bool Ordered { get; set; }

        /// <summary>
        /// Get or set the text direction mode to use.
        /// </summary>
        /// <remarks>The default value of null indicates that there is no text direction information in the RDF.
        /// A value of <see cref="JsonLdRdfDirectionMode.I18NDatatype"/> indicates that both language and text direction are encoded in the literal datatype IRI.
        /// A value of <see cref="JsonLdRdfDirectionMode.CompoundLiteral"/> indicates that literals with text direction are represented as a blank node with an rdf:direction property.
        /// </remarks>
        public JsonLdRdfDirectionMode? RdfDirection { get; set; }

        /// <summary>
        /// If the this flag is set to true, RDF literals with a datatype IRI that equals xsd:integer or xsd:double are converted 
        /// to a JSON numbers and RDF literals with a datatype IRI that equals xsd:boolean are converted to true or false based 
        /// on their lexical form.
        /// </summary>
        public bool UseNativeTypes { get; set; }

        /// <summary>
        /// Unless this flag is set to true, rdf:type predicates will be serialized as @type as long as the 
        /// associated object is either an IRI or blank node identifier.
        /// </summary>
        public bool UseRdfType { get; set; }

        /// <summary>
        /// Get or set the default processing mode for the writer.
        /// </summary>
        public JsonLdProcessingMode ProcessingMode { get; set; } = JsonLdProcessingMode.JsonLd11;

        /// <summary>
        /// Get or set the formatting to apply to the JSON generated by the writer.
        /// </summary>
        /// <remarks>Defaults to <see cref="Newtonsoft.Json.Formatting.Indented"/>.</remarks>
        public Newtonsoft.Json.Formatting JsonFormatting { get; set; } = Newtonsoft.Json.Formatting.Indented;
    }
}