/*
// <copyright>
// dotNetRDF is free and open source software licensed under the MIT License
// -------------------------------------------------------------------------
// 
// Copyright (c) 2009-2025 dotNetRDF Project (http://dotnetrdf.org/)
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is furnished
// to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
*/

using System.Diagnostics.CodeAnalysis;
using VDS.RDF.Query.Algebra;

namespace VDS.RDF.Query.Pull;

/**
 * Represents the context for evaluation of a SPARQL expression
 */
public class ExpressionContext(ISet bindings, IRefNode? activeGraph)
{
    /**
     * Get the set of variable bindings that apply to the expression evaluation.
     */
    public readonly ISet Bindings = bindings;
    /**
     * Get the name of the active graph to use for the expression evaluation.
     */
    public readonly IRefNode? ActiveGraph = activeGraph;
    
    /**
     * A map of the blank nodes generated during expression evaluation,
     * mapping the blank node identifier specified in the query to the node generated during evaluation.
     */
    private Dictionary<string, IBlankNode>? _blankNodeMap = null;

    /**
     * Attempt to retrieve the blank node that was previously generated for the specified blank node identifier.
     * Returns true if such a mapping exists, false otherwise.
     * <param name="key">The blank node identifier specified in the SPARQL expression</param>
     * <param name="bNode">Receives the blank node instance generated by the expression evaluation. Guaranteed to be non-null if the return value is true.</param>
     */
    public bool TryGetBlankNode(string key, [NotNullWhen(returnValue:true)]out IBlankNode? bNode)
    {
        bNode = null;
        return _blankNodeMap?.TryGetValue(key, out bNode) ?? false;
    }

    /**
     * Record the blank node instance generated for the specified blank node identifier when evaluating the expression.
     */
    public void MapBlankNode(string key, IBlankNode bNode)
    {
        _blankNodeMap ??= new Dictionary<string, IBlankNode>();
        _blankNodeMap.Add(key, bNode);
    }
}